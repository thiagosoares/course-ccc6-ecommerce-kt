buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
		classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlin_version}"
		classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlin_version}"
		classpath "org.jlleitschuh.gradle:ktlint-gradle:10.2.1"
		classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${detekt_version}"
	}
}

plugins {
	id "java"
	id "maven-publish"
	id "idea"
	id "eclipse"
	id "jacoco"
	id "org.springframework.boot"
	id "com.google.cloud.tools.jib"
	id "com.gorylenko.gradle-git-properties"
	id "com.github.node-gradle.node"
	id "org.sonarqube"
	id "io.spring.nohttp"
	id "com.github.andygoossens.gradle-modernizer-plugin"
}

ext {
	set('testcontainersVersion', "1.15.3")
}

group = "br.com.tfsoares.courses.branas"
version = "0.0.1-SNAPSHOT"
description = ""

sourceCompatibility=11
targetCompatibility=11
assert System.properties["java.specification.version"] == "11" || "12" || "13" || "14" || "15" || "16" || "17" || "18"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: 'gradle/kotlin.gradle'


if (project.hasProperty("prod")) {
	apply from: "gradle/profile_prod.gradle"
} else {
	apply from: "gradle/profile_dev.gradle"
}

eclipse {
	sourceSets {
		main {
			java {
				srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
			}
		}
	}
}

defaultTasks "bootRun"

springBoot {
	mainClass = "br.com.tfsoares.courses.branas.ecommerce.Application"
}

test {
	useJUnitPlatform()
	exclude "**/*IT*", "**/*IntTest*"
	testLogging {
		events 'FAILED', 'SKIPPED'
	}
	jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
	reports {
		html.enabled = true
	}
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	description = "Execute integration tests."
	group = "verification"
	include "**/*IT*", "**/*IntTest*"
	exclude "**/*CucumberIT*"
	testLogging {
		events 'FAILED', 'SKIPPED'
	}
	jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
	if (project.hasProperty('testcontainers')) {
		environment 'spring.profiles.active', 'testcontainers'
	}
	reports {
		html.enabled = true
	}
}
check.dependsOn integrationTest

task consoleLauncherTest(type: JavaExec) {
	dependsOn(testClasses)
	String cucumberReportsDir = file("$buildDir/reports/tests")
	outputs.dir(reportsDir)
	classpath = sourceSets["test"].runtimeClasspath
	main = "org.junit.platform.console.ConsoleLauncher"
	args("--scan-classpath")
	args("--include-engine", "cucumber")
	args("--reports-dir", cucumberReportsDir)
}

task cucumberTest(type: Test) {
	dependsOn(consoleLauncherTest)
	description = "Execute cucumber BDD tests."
	group = "verification"
	include "**/*CucumberIT*"
	reports {
		html.enabled = true
	}
}
check.dependsOn cucumberTest

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}
check.dependsOn jacocoTestReport

task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn test
}

task integrationTestReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn integrationTest
}

task cucumberTestReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn cucumberTest
}

if (!project.hasProperty("runList")) {
	project.ext.runList = "main"
}

modernizer {
	failOnViolations = true
	includeTestClasses = true
}

gitProperties {
	failOnNoGitDirectory = false
	keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
	toolVersion "${checkstyleVersion}"
	configFile file("checkstyle.xml")
	checkstyleTest.enabled = false
}

nohttp {
	source.include "build.gradle", "README.md"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")

	implementation ("org.springframework.boot:spring-boot-starter-webflux") {
		exclude module: "spring-boot-starter-tomcat"
	}
	implementation "org.springframework.boot:spring-boot-starter-undertow"
	implementation "org.springframework.boot:spring-boot-starter-logging"
	implementation "org.springframework.boot:spring-boot-starter-actuator"

	implementation "javax.annotation:javax.annotation-api"
	implementation "io.dropwizard.metrics:metrics-core"
	implementation "io.micrometer:micrometer-registry-prometheus"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
	implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
	implementation "com.fasterxml.jackson.core:jackson-annotations"
	implementation "com.fasterxml.jackson.core:jackson-databind"
	implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
	implementation "org.apache.commons:commons-lang3"
	implementation "io.github.microutils:kotlin-logging:2.1.21"

	implementation "javax.cache:cache-api"
	implementation "org.hibernate:hibernate-core"
	implementation "com.zaxxer:HikariCP"
	implementation "javax.transaction:javax.transaction-api"
	implementation "org.ehcache:ehcache"
	implementation "org.hibernate:hibernate-jcache"
	implementation "org.hibernate:hibernate-entitymanager"
	implementation "org.hibernate.validator:hibernate-validator"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"

	implementation "org.postgresql:postgresql"
	implementation "org.flywaydb:flyway-core"


	implementation "org.zalando:problem-spring-webflux"
	implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
	implementation "io.jsonwebtoken:jjwt-api"
	runtimeOnly "io.jsonwebtoken:jjwt-impl"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson"
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

	developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"

	testImplementation platform("org.testcontainers:testcontainers-bom:1.16.3")
	testImplementation "org.springframework.boot:spring-boot-test"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.junit.platform:junit-platform-console"
	testImplementation "io.cucumber:cucumber-junit-platform-engine"
	testImplementation "io.cucumber:cucumber-java"
	testImplementation "io.cucumber:cucumber-spring"
	testImplementation "io.mockk:mockk:1.9.3"
	testImplementation "com.ninja-squad:springmockk:1.1.3"

	testImplementation "com.h2database:h2"
	testImplementation "org.testcontainers:postgresql"
	testImplementation "org.testcontainers:junit-jupiter"

	developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
}

task cleanResources(type: Delete) {
	delete "build/resources"
}

wrapper {
	gradleVersion = "7.4.2"
}

compileJava.dependsOn processResources
